//На вход модуля поступают тактовые импульсы clk_i c частотой N, асинхронный сигнал сброса reset_n_i (сброс по уровню 0).
//В произвольный момент времени могут приходить асинхронные импульсы syncro_i длительностью не менее одного такта сигнала clk_i.
//От переднего фронта этого импульса необходимо отсчитать 11 тактов clk_i и провести 8 измерений с помощью АЦП.
//Для выборки данных на АЦП необходимо подать сигнал запроса adc_data_req_o длительностью не менее 2 тактов clk_i. По переднему фронту
//этого сигнала запроса АЦП начинает выборку и оцифровку данных. АЦП работает по фронту запроса, а не по уровню. Необходимо снять сигнал запроса и дождаться готовности данных АЦП по сигналу data_rdy_o.
//На это потребуется несколько тактов clk_i. Данные с АЦП будут готовы по переднему фронту data_rdy_o и будут актуальны до следующиго запроса.
//Сигнал data_rdy_o при этом будет в состоянии логической 1. Значения с АЦП двуполярные в дополнительном коде.
//Их необходимо усреднить по полученным 8-ми измерениям и в таком же формате, как выдаёт АЦП выдать на выход с флагом готовности data_rdy_o. 
//
//Код оформить на языке Verilog HDL без использования конструкций SystemVerilog
//Проверяться проект будет в среде  в Icarus Verilog версии 11

module data_acquire(
	input clk_i,
	input reset_n_i,
	
//ADC interface
	output	adc_data_req_o,
	input	adc_data_rdy_i,
	input [11:0] adc_data_i
	
//Module output interface
	input				syncro_i,
	output [11:0]	data_o,
	output 			data_rdy_o
);
